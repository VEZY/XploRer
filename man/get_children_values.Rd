% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/mtg_helpers.R
\name{get_children_values}
\alias{get_children_values}
\title{Get children value}
\usage{
get_children_values(attribute, node, .scale = NULL, .recursive = TRUE)
}
\arguments{
\item{attribute}{Any node attribute (as a character)}

\item{node}{The node (do not put something when used from \code{\link[=mutate_mtg]{mutate_mtg()}})}

\item{.scale}{The names of the MTG scale required (i.e. the SYMBOL from the MTG classes)}

\item{.recursive}{If a child is not of the right \code{.scale}, continue until the \code{.scale}
required is met if \code{TRUE}, or returns \code{NA} if \code{FALSE}.}
}
\value{
The attribute values from the children of the node
}
\description{
Get attribute values from the children of a node.
}
\details{
This function returns the values of any attribute of the children of
a node. It is mainly intended to be used in a call to \code{\link[=mutate_mtg]{mutate_mtg()}} (see \code{\link[=mutate_mtg]{mutate_mtg()}}
doc for examples).
}
\examples{
filepath= system.file("extdata", "simple_plant.mtg", package = "XploRer")
MTG = read_mtg(filepath)

# node_5 has one child:
get_children_values("Length", node = data.tree::FindNode(MTG$MTG, "node_5"))

# node_3 has two children, returns two values:
get_children_values("Length", node = data.tree::FindNode(MTG$MTG, "node_3"))
# To get the names of those children:
get_children_values("name", node = data.tree::FindNode(MTG$MTG, "node_3"))

# To get the values of the children of each node:
mutate_mtg(MTG, children_width = get_children_values("Width", node = node))
print(MTG$MTG, "Width", "children_width")

}
