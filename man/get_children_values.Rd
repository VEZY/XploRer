% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/mtg_helpers.R
\name{get_children_values}
\alias{get_children_values}
\title{Get children value}
\usage{
get_children_values(attribute, node = NULL, scale = NULL, .recursive = TRUE)
}
\arguments{
\item{attribute}{Any node attribute (as a character)}

\item{node}{The MTG node}

\item{scale}{The names of the MTG scale(s) required (i.e. the SYMBOL from the MTG classes)}

\item{.recursive}{If a child is not of the right \code{scale}, continue until the \code{scale}
required is met if \code{TRUE}, or returns \code{NA} if \code{FALSE}.}
}
\value{
The attribute values from the children of the node
}
\description{
Get attribute values from the children of a node.
}
\details{
This function is mainly intended to be used with \code{\link[=mutate_mtg]{mutate_mtg()}}. In this case,
the \code{node} argument can be left empty (or you can put \code{node = node} equivalently).
}
\examples{
filepath= system.file("extdata", "simple_plant.mtg", package = "XploRer")
MTG = read_mtg(filepath)

# node_5 has one child:
get_children_values("Length", node = data.tree::FindNode(MTG$MTG, "node_5"))

# node_3 has two children, returns two values:
get_children_values("Length", node = data.tree::FindNode(MTG$MTG, "node_3"))
# To get the names of those children:
get_children_values("name", node = data.tree::FindNode(MTG$MTG, "node_3"))

# To get the values of the children of each node:
mutate_mtg(MTG, children_width = get_children_values("Width"))
print(MTG$MTG, "Width", "children_width")

}
