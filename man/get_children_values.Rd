% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/get_descendants_values.R
\name{get_children_values}
\alias{get_children_values}
\title{Get children value}
\usage{
get_children_values(
  attribute,
  node = NULL,
  scale = NULL,
  symbol = NULL,
  continue = TRUE
)
}
\arguments{
\item{attribute}{Any node attribute (as a character)}

\item{node}{The MTG node}

\item{scale}{An integer vector for filtering the \code{.scale} of the children (i.e. the SCALE
column from the MTG classes).}

\item{symbol}{A character vector for filtering the children by the name of their \code{.symbol} (i.e. the SYMBOL
column from the MTG classes).}

\item{continue}{If a child is not of the right \code{scale}, continue until the \code{scale}
required is met if \code{TRUE}, or returns \code{NA} if \code{FALSE}.}
}
\value{
The attribute values from the children of the node
}
\description{
Get attribute values from the children of a node.
}
\details{
This function is mainly intended to be used with \code{\link[=mutate_mtg]{mutate_mtg()}}. In this case,
the \code{node} argument can be left empty (or you can put \code{node = node} equivalently).
}
\examples{
filepath= system.file("extdata", "simple_plant.mtg", package = "XploRer")
MTG = read_mtg(filepath)

# node_5 has one child:
get_children_values("Length", node = extract_node(MTG, "node_5"))

# Using node 3 as reference now:
node_3 = extract_node(MTG, "node_3")
# node_3 has two children, returns two values:
get_children_values("Length", node = node_3)
# To get the names of those children:
get_children_values("name", node = node_3)

# The width is not available for one child ("node_5"):
get_children_values("Width", node = node_3)

# We can filter by scale if we need to return the values for some scales only:
get_children_values("Width", node = node_3, scale = "Leaf")
# Here we get the value of node_6 also, because its parent "node_5" is not of scale
# "Leaf", so it was filtered out. It you need the values for one scale, but not
# making a recursive search from one scale to another until finding the required scale,
# you can put the `continue` argument to `FALSE`:

# We can also get the values recursively until finding the right value:
get_children_values("Width", node = node_3, scale = "Leaf", continue = FALSE)


# To get the values of the children of each node:
mutate_mtg(MTG, children_width = get_children_values("Width"))
print(MTG$MTG, "Width", "children_width")

}
