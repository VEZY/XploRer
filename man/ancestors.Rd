% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ancestors.R
\name{ancestors}
\alias{ancestors}
\title{Get ancestors values}
\usage{
ancestors(
  attribute,
  node = NULL,
  scale = NULL,
  symbol = NULL,
  link = NULL,
  filter_fun = NULL,
  self = FALSE,
  continue = TRUE,
  recursivity_level = NULL
)
}
\arguments{
\item{attribute}{Any node attribute (as a character)}

\item{node}{The MTG node}

\item{scale}{Integer vector for filtering ancestors by their \code{.scale} (i.e. the SCALE
from the MTG classes).}

\item{symbol}{A character vector for filtering the ancestors by their \code{.symbol} (i.e. the SYMBOL
column from the MTG classes).}

\item{link}{A character vector for filtering the \code{.link} with the parent (e.g. not a branch)}

\item{filter_fun}{Any filtering function taking a node as input, e.g. \code{\link[data.tree:isLeaf]{data.tree::isLeaf()}}}

\item{self}{Return the value of the current node (\code{TRUE}), or the ancestors only (\code{FALSE}, the default)}

\item{continue}{Boolean. If \code{TRUE}, the function returns all nodes that are not filtered. If \code{FALSE}, stop
at the first node that is filtered out.}

\item{recursivity_level}{The maximum number of recursions allowed (considering filters). E.g. to get the
parent only: \code{recursivity_level = 1}, for parent + grand-parent: \code{recursivity_level = 2}.
If \code{NULL} (the default), the function returns all values from the node to the root.}
}
\value{
The attribute values from the ancestors of the node (from first parent to farther ancestor)
}
\description{
Get attribute values from all ancestors (basipetal).
}
\details{
This function is mainly intended to be used with \code{\link[=mutate_mtg]{mutate_mtg()}}. In this case,
the \code{node} argument can be left empty (or \code{node = node} equivalently).
}
\examples{
filepath= system.file("extdata", "simple_plant.mtg", package = "XploRer")
MTG = read_mtg(filepath)

# node_6 has four ancestors:
ancestors("Length", node = extract_node(MTG, "node_6"))
# Two of them have no values for Length

# If the value of node_6 is also needed:
ancestors("Length", node = extract_node(MTG, "node_6"), self = TRUE)

# If we only need the value of the first parent:
ancestors("Length", node = extract_node(MTG, "node_6"), recursivity_level = 1)

# We can filter by symbol if we need to return the values for some symbols only:
ancestors("Width", node = extract_node(MTG, "node_6"), symbol = "Internode")

# The values are only returned for the ancestors with the required symbol
# For example we know that a leaf cannot be an ancestor because it cannot bear anything:
ancestors("Width", node = extract_node(MTG, "node_6"), symbol = "Leaf")
# In this case it returns a length 0 vector.

}
