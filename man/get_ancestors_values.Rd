% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/mtg_helpers.R
\name{get_ancestors_values}
\alias{get_ancestors_values}
\title{Get ancestors value}
\usage{
get_ancestors_values(
  attribute,
  node = NULL,
  scale = NULL,
  symbol = NULL,
  self = FALSE
)
}
\arguments{
\item{attribute}{Any node attribute (as a character)}

\item{node}{The MTG node}

\item{scale}{An integer vector for filtering ancestors by their \code{.scale} (i.e. the SCALE
from the MTG classes).}

\item{symbol}{A character vector for filtering the names of the ancestors \code{.symbol} (i.e. the SYMBOL
column from the MTG classes).}

\item{self}{Return the value of the current node (\code{TRUE}), or the ancestors only (\code{FALSE}, the default)}
}
\value{
The attribute values from the ancestors of the node (from first parent to farther ancestor)
}
\description{
Get attribute values from all ancestors (all nodes above).
}
\details{
This function is mainly intended to be used with \code{\link[=mutate_mtg]{mutate_mtg()}}. In this case,
the \code{node} argument can be left empty (or you can put \code{node = node} equivalently).
}
\examples{
filepath= system.file("extdata", "simple_plant.mtg", package = "XploRer")
MTG = read_mtg(filepath)

# node_6 has four ancestors:
get_ancestors_values("Length", node = extract_node(MTG, "node_6"))
# Two of them have no values for Length

# If the value of node_6 is also needed:
get_ancestors_values("Length", node = extract_node(MTG, "node_6"), self = TRUE)

# We can filter by symbol if we need to return the values for some symbols only:
get_ancestors_values("Width", node = extract_node(MTG, "node_6"), symbol = "Internode")

# The values are only returned for the ancestors with the required symbol
# For example we know that a leaf cannot be an ancestor because it cannot bear anything:
get_ancestors_values("Width", node = extract_node(MTG, "node_6"), symbol = "Leaf")
# In this case it returns a length 0 vector.

# Here we get the value of node_6 also, because its parent "node_5" is not of symbol
# "Leaf", so it was filtered out. It you need the values for one symbol, but not
# making a recursive search from one scale to another until finding the required symbol,
# you can put the `recursive` argument to `FALSE`:

}
