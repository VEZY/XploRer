% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/mtg_helpers.R
\name{get_parent_value}
\alias{get_parent_value}
\title{Get parent value}
\usage{
get_parent_value(
  attribute,
  node = NULL,
  scale = NULL,
  symbol = NULL,
  recursive = TRUE
)
}
\arguments{
\item{attribute}{Any node attribute (as a character, an expression or a node callm see details)}

\item{node}{The node (do not put something when used from \code{\link[=mutate_mtg]{mutate_mtg()}})}

\item{scale}{An integer vector for filtering the MTG scale of the parent (i.e. the SCALE
column from the MTG classes).}

\item{symbol}{A character vector for filtering the names of the MTG symbol required for the parent (i.e. the SYMBOL
column from the MTG classes).}

\item{recursive}{If a parent is not of the right \code{scale}, continue until the \code{scale}
required is met if \code{TRUE}, or returns \code{NA} if \code{FALSE}.}
}
\value{
The attribute values from the parent of a node
}
\description{
Get the value of one or several variables from the parent node. This is a helper
function that is usually used as input to \code{\link[=mutate_mtg]{mutate_mtg()}} to get the values of the parent node
for all nodes.
}
\details{
The \code{attribute} argument can be given as a string (\emph{e.g.} attribute = "Length"), an
expression (\emph{e.g.} attribute = Length) or a call to a node (\emph{e.g.} attribute = node$Length).
All are equivalent because they evaluate the node given by the user or by the calling function.
This behavior is set to homogenize the grammar used in the calls of \code{mutate_mtg()}.
}
\note{
This function returns the values of any attribute of the parent of a node. It is
mainly intended to be used in a call to \code{\link[=mutate_mtg]{mutate_mtg()}} (see \code{\link[=mutate_mtg]{mutate_mtg()}} doc for examples).
}
\examples{
filepath= system.file("extdata", "simple_plant.mtg", package = "XploRer")
MTG = read_mtg(filepath)
get_parent_value(Length,  node = extract_node(MTG, "node_5"))
get_parent_value("Length",  node = extract_node(MTG, "node_5"))
}
