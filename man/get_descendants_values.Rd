% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/get_descendants_values.R
\name{get_descendants_values}
\alias{get_descendants_values}
\title{Get descendants values}
\usage{
get_descendants_values(
  attribute,
  node = NULL,
  scale = NULL,
  symbol = NULL,
  link = NULL,
  continue = TRUE,
  self = FALSE,
  filter_fun = NULL,
  recursivity_level = NULL
)
}
\arguments{
\item{attribute}{Any node attribute (as a character)}

\item{node}{The MTG node}

\item{scale}{An integer vector for filtering descendant by their \code{.scale} (i.e. the SCALE
from the MTG classes).}

\item{symbol}{A character vector for filtering the names of the descendant \code{.symbol} (i.e. the SYMBOL
column from the MTG classes).}

\item{link}{A character vector for filtering the \code{.link} with the descendant}

\item{continue}{Boolean. If \code{TRUE}, the function returns all nodes that are not filtered. If \code{FALSE}, stop
at the first node that is filtered out.}

\item{self}{Return the value of the current node (\code{TRUE}), or the ancestors only (\code{FALSE}, the default)}

\item{filter_fun}{Any filtering function taking a node as input, e.g. \code{\link[data.tree:isLeaf]{data.tree::isLeaf()}}}

\item{recursivity_level}{The maximum number of recursions allowed (considering filters). E.g. to get only the
children, \code{recursivity_level = 1}, if children + their children: \code{recursivity_level = 2}.
If \code{NULL} (the default), the function returns all values from the node to the root.}
}
\value{
The attribute values from the descendant(s) of the node
}
\description{
Get attribute values from the descendants (acropetal).
}
\details{
This function is mainly intended to be used with \code{\link[=mutate_mtg]{mutate_mtg()}}. In this case,
the \code{node} argument can be left empty (or you can put \code{node = node} equivalently).
}
\examples{
filepath= system.file("extdata", "tree1h.mtg", package = "XploRer")
MTG = read_mtg(filepath)
node_8 = extract_node(MTG,"node_8")
# getting all descendants of node_8
get_descendants_values(attribute = "length", node = node_8)

# getting all descendants of node_8, but only the nodes with symbol "S":
get_descendants_values(attribute = "length", node = node_8, symbol = "S")

# getting all descendants of node_8, but only the nodes with symbol "S", and not
# recursively, i.e. we stop the search for a child if it is filtered out (we don't
# go to its own children)
get_descendants_values(attribute = "length", node = node_8, symbol = "S",
                       continue = FALSE)

# getting the children of node_8 (and not below):
get_descendants_values(attribute = "length", node = node_8, recursivity_level = 1)
# getting the children of node_8 and their children:
get_descendants_values(attribute = "length", node = node_8, recursivity_level = 2)
# getting the children of node_8 and their children, and filter for "S":
get_descendants_values(attribute = "length", node = node_8, symbol = "S", recursivity_level = 2)
# The function returns until node_12 because node_10 is not an "S" and is then filtered out
# which makes node_12 two levels below node.

# To get the descendants of a node but only for the nodes following it, not
# branching (e.g. for an axis):
get_descendants_values(attribute = "length", node = node_8, symbol = "S",
                       link = c("/","<"), continue = FALSE)

# To get the values for the leaves (i.e. the last node) only:
get_descendants_values(attribute = "length", node = node_8, filter_fun = data.tree::isLeaf)

# Length were observed at the "S" scale (S = segment of an axis between two branches),
# but we need the length at the axis scale, to do so:
mutate_mtg(MTG,
           axis_length = sum(get_descendants_values(attribute = "length", symbol = "S",
                                                   link = c("/","<"), continue = FALSE)),
           .symbol = "A")
}
